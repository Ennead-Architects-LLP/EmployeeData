name: Handle Computer Data

on:
  repository_dispatch:
    types: [computer-data]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (dry run)'
        required: false
        default: false
        type: boolean

jobs:
  handle-computer-data:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests pyyaml flask
        sudo apt-get update
        sudo apt-get install -y jq
    
    - name: Create backup directory
      run: |
        mkdir -p 1-website/assets/computer_info_data_backup
        echo "Created backup directory"
    
    - name: Process computer data
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
      run: |
        set -e  # Exit on any error
        
        echo "Processing computer data (test mode: $TEST_MODE)..."
        if [ "$TEST_MODE" = "true" ]; then
          echo "TEST MODE: Would process computer data here"
          echo "In test mode, no actual data processing occurs"
          echo "✅ Test mode completed successfully"
        else
          echo "Processing computer data from repository dispatch..."
          
          # Extract computer data from the repository dispatch event
          COMPUTER_DATA='${{ toJson(github.event.client_payload.computer_info) }}'
          COMPUTER_NAME='${{ github.event.client_payload.computer_info.computer_name }}'
          HUMAN_NAME='${{ github.event.client_payload.computer_info.human_name }}'
          USERNAME='${{ github.event.client_payload.computer_info.username }}'
          TIMESTAMP='${{ github.event.client_payload.timestamp }}'
          
          echo "Received data for: $HUMAN_NAME ($USERNAME) on $COMPUTER_NAME"
          
          # Create backup file with timestamp
          BACKUP_FILE="1-website/assets/computer_info_data_backup/${COMPUTER_NAME}_$(date +%Y%m%d_%H%M%S).json"
          
          # Create the backup data structure
          cat > "$BACKUP_FILE" << EOF
        {
          "timestamp": "$TIMESTAMP",
          "computer_name": "$COMPUTER_NAME",
          "user_name": "$HUMAN_NAME",
          "username": "$USERNAME",
          "computer_info": $COMPUTER_DATA
        }
        EOF
          
          echo "Created backup file: $BACKUP_FILE"
          
          # Find and update the corresponding employee JSON file
          EMPLOYEE_FILE=$(find 1-website/assets/individual_employees/ -name "*.json" -exec grep -l "\"human_name\": \"$HUMAN_NAME\"" {} \; | head -1)
          
          if [ -n "$EMPLOYEE_FILE" ]; then
            echo "Found employee file: $EMPLOYEE_FILE"
            
            # Create a temporary file with updated computer info
            TEMP_FILE=$(mktemp)
            
            # Use jq to update the computer field
            jq --argjson computer_info "$COMPUTER_DATA" '.computer = $computer_info' "$EMPLOYEE_FILE" > "$TEMP_FILE"
            
            # Replace the original file
            mv "$TEMP_FILE" "$EMPLOYEE_FILE"
            
            echo "Updated employee file with computer information"
          else
            echo "Warning: Could not find employee file for $HUMAN_NAME"
          fi
          
          echo "✅ Computer data processing completed successfully"
        fi
    
    - name: Update JSON data only (no website regeneration needed)
      if: github.event.inputs.test_mode != 'true'
      run: |
        echo "Computer data processed and JSON files updated"
        echo "Website loads data dynamically - no regeneration needed"
    
    - name: Commit and push changes
      if: github.event.inputs.test_mode != 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add 1-website/assets/individual_employees/ 1-website/assets/computer_info_data_backup/
        git diff --staged --quiet || git commit -m "Update computer data from AboutMe app"
        git push